---
title: "Assignment 1"
---

# (a)

[(487) Data visualization and plotting with Shiny for Python \|\| Carson Sievert \|\| RStudio - YouTube](https://www.youtube.com/watch?v=5zJC0AB-UK8&list=PL9HYL-VRX0oTOK4cpbCbRk15K2roEgzVW&index=22)

**In this video, it is explained how Shiny, a web development application created using the R programming language, can be used for data visualization. Shiny is known for its user-friendly interface, making it easy to use. While writing R code, you can use side panels and find your data visualized on the right side. After creating a graph, you can make changes, like altering the number of bins in a histogram, without needing to access the code panel. This significantly simplifies the usage.Furthermore, it is mentioned that Shiny makes it easy to observe the impact of one variable on others, particularly in situations where a series of variables are interdependent, known as reactive computation. Another advantage of Shiny is its ability to offer users a wide range of graph types, including the potential to create interactive graphics.**

## (b)

**R and Python are two languages that can be used interchangeably, and they share many similarities while also having some distinct features. Now, I'll explain a few of these differences:**

**1. When writing code in Python, you cannot identify syntax errors without running the code, whereas in R, it highlights the problematic part even before running the code, allowing you to detect errors.**

**2. In Python, you use the = sign to assign a value to a variable, while in R, you use the \<- sign for assignment.**

-   Code Examples:

    -   In R:

        a \<- c(1,2,3)

    -   In Python:

        a = \[1,2,3\]

**3. Since Python is an object-oriented language, you cannot use dots (.) in variable names to avoid errors. However, in R, there is no such restriction.**

**4. In Python, the first index of an element is 0, while in R, the first element has an index of 1.**

# (c)

```{r}
#| output: false
install.packages("dslabs", repos = " https://CRAN.R-project.org/package=dslabs")
library("dslabs")
data(package = "dslabs")
data("admissions")
no_example <- ifelse(is.na(na_example), 0, na_example)


```

**Na_Example:**

```{r}
print(na_example)
```

**Zero_Example:**

```{r}
print(no_example)
```
