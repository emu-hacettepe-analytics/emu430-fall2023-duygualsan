year <- as.integer(year_names)
print(year)
year_nodes <- lapply(web_page, function(page) {
year_nodes <- page %% html_nodes('span.sc-43986a27-8.jHYIIK.dli-title-metadata-item:nth-child(1)')
year_names <- html_text(year_nodes)
year_names <- tail(head(year_names, -1), -1)
year <- as.integer(year_names)})
year_list <- lapply(web_pages, function(page) {
year_nodes <- page %>% html_nodes('span.sc-43986a27-8.jHYIIK.dli-title-metadata-item:nth-child(1)')
year_names <- html_text(year_nodes)
year_names <- as.integer(tail(head(year_names, -1), -1))  # Convert to integer
return(year_names)
})
print(year_list)
print(as.integer(veri_dakika))
library(rvest)
library(lubridate)
library(stringr)
# Extract movie durations
duration_list <- lapply(web_pages, function(page) {
duration_nodes <- page %>% html_nodes('span.sc-43986a27-8.jHYIIK.dli-title-metadata-item:nth-child(2)')
duration_values <- html_text(duration_nodes)
# Özel fonksiyon: saatDakikaToDakika
saatDakikaToDakika <- function(zaman) {
if (grepl("h", zaman) && grepl("m", zaman)) {
parcalar <- strsplit(zaman, "h|m")[[1]]
return(as.numeric(parcalar[1]) * 60 + as.numeric(parcalar[2]))
} else if (grepl("h", zaman)) {
return(as.numeric(str_extract(zaman, "\\d+(?=h)")) * 60)
} else if (grepl("m", zaman)) {
return(as.numeric(str_extract(zaman, "\\d+(?=m)")))
} else {
return(NA)
}
}
# Dakikaya çevirme işlemi
veri_dakika <- sapply(duration_values, saatDakikaToDakika)
return(as.integer(veri_dakika))
})
# Elde edilen sayıları kontrol et
print(duration_list)
rating_list <- lapply(web_pages, function(page) {
rating_nodes <- page %>% html_nodes('span.ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb.ratingGroup--imdb-rating')
rating_values <- html_text(rating_nodes)
# Temizleme işlemi
clean_ratings <- gsub("\\s*\\(.*\\)", "", rating_values)
return(clean_ratings)
})
# Sonuçları yazdır
print(rating_list)
rating <- as.numeric(rating_list)
rating_list <- lapply(web_pages, function(page) {
rating_nodes <- page %>% html_nodes('span.ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb.ratingGroup--imdb-rating')
rating_values <- html_text(rating_nodes)
# Temizleme işlemi
clean_ratings <- gsub("\\s*\\(.*\\)", "", rating_values)
# Sayısal dönüşüm
numeric_ratings <- as.numeric(gsub("\\s*", "", clean_ratings))
return(numeric_ratings)
})
# Sonuçları yazdır
print(rating_list)
rating_list <- lapply(web_pages, function(page) {
rating_nodes <- page %>% html_nodes('span.ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb.ratingGroup--imdb-rating')
rating_values <- html_text(rating_nodes)
# Temizleme işlemi ve sayısal dönüşüm
numeric_ratings <- as.numeric(str_extract(rating_values, "\\d+\\.?\\d*"))
return(numeric_ratings)
})
# Sonuçları yazdır
print(rating_list)
votes_list <- lapply(web_pages, function(page) {
votes_nodes <- page %>% html_nodes('span.ipc-rating-star--voteCount')
votes_values <- html_text(votes_nodes)
# Temizleme işlemi ve sayısal dönüşüm
numeric_votes <- as.numeric(gsub(",", "", votes_values))
return(numeric_votes)
})
# Sonuçları yazdır
print(votes_list)
print(votes_values)
votes_list <- lapply(web_pages, function(page) {
votes_nodes <- page %>% html_nodes('span.ipc-rating-star--voteCount')
votes_values <- html_text(votes_nodes)
# Temizleme işlemi ve sayısal dönüşüm
numeric_votes <- as.numeric(gsub("K", "", gsub(",", "", votes_values)))
return(numeric_votes)
})
# Sonuçları yazdır
print(votes_list)
votes_list <- lapply(web_pages, function(page) {
votes_nodes <- page %>% html_nodes('span.ipc-rating-star--voteCount')
votes_values <- html_text(votes_nodes)
# Temizleme işlemi ve sayısal dönüşüm
numeric_votes <- as.numeric(gsub("K", "000", gsub(",", "", votes_values)))
return(numeric_votes)
})
votes_list <- lapply(web_pages, function(page) {
votes_nodes <- page %>% html_nodes('span.ipc-rating-star--voteCount')
votes_values <- html_text(votes_nodes)
# Temizleme işlemi ve sayısal dönüşüm
numeric_votes <- as.numeric(gsub("K", "000", gsub(",", "", votes_values)))
return(numeric_votes)
})
# Extract movie votes
votes_list <- lapply(web_pages, function(page) {
votes_nodes <- page %>% html_nodes('span.ipc-rating-star--voteCount')
votes_values <- html_text(votes_nodes)
# Sadece "K" kısmını temizleme
votes_without_K <- gsub("K", "", votes_values)
# Sayısal dönüşüm
numeric_votes <- as.numeric(gsub(",", "", votes_without_K))
return(numeric_votes)
})
# Sonuçları yazdır
print(votes_list)
votes_list <- lapply(web_pages, function(page) {
votes_nodes <- page %>% html_nodes('span.ipc-rating-star--voteCount')
votes_values <- html_text(votes_nodes)
# Sadece "K" kısmını kaldırma
votes_without_K <- gsub("K", "", votes_values)
return(votes_without_K)
})
# Sonuçları yazdır
print(votes_list)
votes_list <- lapply(web_pages, function(page) {
votes_nodes <- page %>% html_nodes('span.ipc-rating-star--voteCount')
votes_values <- html_text(votes_nodes)
# Sadece "K" kısmını kaldırma
votes_without_K <- gsub("K", "", votes_values)
numeric_votes <- as.numeric(str_extract(votes_without_K,"\\d+\\.?\\d*"))
return(numeric_votes)
})
votes_list <- lapply(web_pages, function(page) {
votes_nodes <- page %>% html_nodes('span.ipc-rating-star--voteCount')
votes_values <- html_text(votes_nodes)
# Sadece "K" kısmını kaldırma
votes_without_K <- gsub("K", "", votes_values)
numeric_votes <- as.numeric(str_extract(votes_without_K,"\\d+\\.?\\d*"))
return(numeric_votes)
})
# Sonuçları yazdır
print(votes_list)
votes_list <- lapply(web_pages, function(page) {
votes_nodes <- page %>% html_nodes('span.ipc-rating-star--voteCount')
votes_values <- html_text(votes_nodes)
# Sadece "K" kısmını kaldırma
votes_without_K <- gsub("K", "", votes_values)
numeric_votes <- as.numeric(str_extract(votes_without_K,"\\d+\\.?\\d*"))
return(numeric_votes*1000)
})
# Sonuçları yazdır
print(votes_list)
movie_data <- data.frame(
Title = title_names,
Year = as.integer(year_names),
Duration = duration_values,
Rating = rating_values,
Votes = votes_values
)
length(title_names)
length(year_list)
length(duration_list)
length(rating_list)
length(votes_list)
min_length <- min(length(title_names), length(year_list), length(duration_list), length(rating_list), length(votes_list))
# Ardından data frame'i oluşturalım
movie_data <- data.frame(
Title = title_names[1:min_length],
Year = year_list[1:min_length],
Duration = duration_list[1:min_length],
Rating = rating_list[1:min_length],
Votes = votes_list[1:min_length]
)
url1 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-10-31&num_votes=2500,&country_of_origin=TR&count=250"
url2 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"
# URL'leri bir vektörde toplama
urls <- c(url1, url2)
# Her bir URL'den verileri çekme işlemi
data_list <- lapply(urls, function(url) {
web_page <- read_html(url)
# Verileri çekme işlemleri (Örneğin, title_nodes, year_nodes, vb.)
return(list(title_names, year_list, duration_list, rating_list, votes_list))
})
# Her iki URL'den gelen verileri birleştirme
combined_data <- do.call(rbind, data_list)
# Oluşturulan data frame'i yazdıralım
print(combined_data)
print(title_names)
library(rvest)
library(stringr)
# İki farklı URL
url1 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-10-31&num_votes=2500,&country_of_origin=TR&count=250"
url2 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"
# URL'leri bir vektörde toplama
urls <- c(url1, url2)
# Her iki URL'den gelen verileri tek bir listede toplama
combined_data <- lapply(urls, function(url) {
web_page <- read_html(url)
library(rvest)
# İki farklı URL
url1 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-10-31&num_votes=2500,&country_of_origin=TR&count=250"
url2 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"
# URL'leri bir vektörde toplama
urls <- c(url1, url2)
# Her bir URL'den HTML sayfalarını çekme
web_pages <- lapply(urls, read_html)
# Başlıkları çıkarma işlemi
title_names <- web_pages %>%
lapply(function(page) {
title_nodes <- page %>% html_nodes('.ipc-title__text')
titles <- html_text(title_nodes)
# "Advanced search" ve "Recently viewed" içeren başlıkları filtrele
titles <- titles[!grepl("Advanced search|Recently viewed", titles)]
return(titles)
})
# Oluşturulan listeyi yazdır
print(title_names)
print(title_names)
library(rvest)
library(stringr)
# İki farklı URL
url1 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-10-31&num_votes=2500,&country_of_origin=TR&count=250"
url2 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"
# URL'leri bir vektörde toplama
urls <- c(url1, url2)
# Her bir URL'den HTML sayfalarını çekme
web_pages <- lapply(urls, read_html)
# Başlıkları çıkarma işlemi
title_names <- web_pages %>%
lapply(function(page) {
title_nodes <- page %>% html_nodes('.ipc-title__text')
titles <- html_text(title_nodes)
# "Advanced search" ve "Recently viewed" içeren başlıkları filtrele
titles <- titles[!grepl("Advanced search|Recently viewed", titles)]
return(titles)
})
# Oluşturulan listeyi yazdır
print(title_names)
library(rvest)
library(stringr)
# İki farklı URL
url1 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-10-31&num_votes=2500,&country_of_origin=TR&count=250"
url2 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"
# URL'leri bir vektörde toplama
urls <- c(url1, url2)
# Her bir URL'den HTML sayfalarını çekme
web_pages <- lapply(urls, read_html)
# Başlıkları çıkarma işlemi
title_names <- web_pages %>%
lapply(function(page) {
title_nodes <- page %>% html_nodes('.ipc-title__text')
titles <- html_text(title_nodes)
# "Advanced search" ve "Recently viewed" içeren başlıkları filtrele
titles <- titles[!grepl("Advanced search|Recently viewed", titles)]
return(titles)
})
# Oluşturulan listeyi yazdır
print(title_names)
library(rvest)
# İki farklı URL
url1 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-10-31&num_votes=2500,&country_of_origin=TR&count=250"
url2 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"
# URL'leri bir vektörde toplama
urls <- c(url1, url2)
# Her bir URL'den HTML sayfalarını çekme
web_pages <- lapply(urls, read_html)
# Başlıkları çıkarma işlemi
title_names <- lapply(web_pages, function(page) {
title_nodes <- page %>% html_nodes('.ipc-title__text')
titles <- html_text(title_nodes)
# "Advanced search" ve "Recently viewed" içeren başlıkları filtrele
titles <- titles[!grepl("Advanced search|Recently viewed", titles)]
return(titles)
})
# Oluşturulan listeyi yazdır
print(title_names)
print("duygu")
library(rvest)
library(stringr)
# İki farklı URL
url1 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-10-31&num_votes=2500,&country_of_origin=TR&count=250"
url2 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"
# URL'leri bir vektörde toplama
urls <- c(url1, url2)
# Her bir URL'den HTML sayfalarını çekme
web_pages <- lapply(urls, read_html)
# Başlıkları çıkarma işlemi
title_names <- web_pages %>%
lapply(function(page) {
title_nodes <- page %>% html_nodes('.ipc-title__text')
titles <- html_text(title_nodes)
# "Advanced search" ve "Recently viewed" içeren başlıkları filtrele
titles <- titles[!grepl("Advanced search|Recently viewed", titles)]
return(titles)
})
# Oluşturulan listeyi yazdır
print(title_names)
print(title_names)
library(rvest)
# İki farklı URL
url1 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=2010-01-01,2023-10-31&num_votes=2500,&country_of_origin=TR&count=250"
url2 <- "https://m.imdb.com/search/title/?title_type=feature&release_date=,2009-12-31&num_votes=2500,&country_of_origin=TR&count=250"
# URL'leri bir vektörde toplama
urls <- c(url1, url2)
# Her bir URL'den HTML sayfalarını çekme
web_pages <- lapply(urls, read_html)
# Başlıkları çıkarma işlemi
title_names <- lapply(web_pages, function(page) {
title_nodes <- page %>% html_nodes('.ipc-title__text')
titles <- html_text(title_nodes)
# "Advanced search" ve "Recently viewed" içeren başlıkları filtrele
titles <- titles[!grepl("Advanced search|Recently viewed", titles)]
return(titles)
})
# Alt listeleri tek bir liste içinde birleştirme
title_names <- unlist(title_names, recursive = TRUE)
# Oluşturulan listeyi yazdır
print(title_names)
title_names <- lapply(web_pages, function(page) {
title_nodes <- page %>% html_nodes('.ipc-title__text')
titles <- html_text(title_nodes)
# "Advanced search" ve "Recently viewed" içeren başlıkları filtrele
titles <- titles[!grepl("Advanced search|Recently viewed", titles)]
return(titles)
})
title_names <- unlist(title_names, recursive = TRUE)
print(title_names)
year_list <- lapply(web_pages, function(page) {
year_nodes <- page %>% html_nodes('span.sc-43986a27-8.jHYIIK.dli-title-metadata-item:nth-child(1)')
year_names <- html_text(year_nodes)
year_names <- as.integer(tail(head(year_names, -1), -1))  # Convert to integer
return(year_names)
})
year_list <- unlist(year_list, recursive = TRUE)
print(year_list)
duration_list <- lapply(web_pages, function(page) {
duration_nodes <- page %>% html_nodes('span.sc-43986a27-8.jHYIIK.dli-title-metadata-item:nth-child(2)')
duration_values <- html_text(duration_nodes)
# Özel fonksiyon: saatDakikaToDakika
saatDakikaToDakika <- function(zaman) {
if (grepl("h", zaman) && grepl("m", zaman)) {
parcalar <- strsplit(zaman, "h|m")[[1]]
return(as.numeric(parcalar[1]) * 60 + as.numeric(parcalar[2]))
} else if (grepl("h", zaman)) {
return(as.numeric(str_extract(zaman, "\\d+(?=h)")) * 60)
} else if (grepl("m", zaman)) {
return(as.numeric(str_extract(zaman, "\\d+(?=m)")))
} else {
return(NA)
}
}
# Dakikaya çevirme işlemi
veri_dakika <- sapply(duration_values, saatDakikaToDakika)
return(as.integer(veri_dakika))
})
duration_list <- unlist(duration_list, recursive = TRUE)
print(duration_list)
rating_list <- lapply(web_pages, function(page) {
rating_nodes <- page %>% html_nodes('span.ipc-rating-star.ipc-rating-star--base.ipc-rating-star--imdb.ratingGroup--imdb-rating')
rating_values <- html_text(rating_nodes)
# Temizleme işlemi ve sayısal dönüşüm
numeric_ratings <- as.numeric(str_extract(rating_values, "\\d+\\.?\\d*"))
return(numeric_ratings)
})
rating_list <- unlist(rating_list, recursive = TRUE)
print(rating_list)
votes_list <- lapply(web_pages, function(page) {
votes_nodes <- page %>% html_nodes('span.ipc-rating-star--voteCount')
votes_values <- html_text(votes_nodes)
# Sadece "K" kısmını kaldırma
votes_without_K <- gsub("K", "", votes_values)
numeric_votes <- as.numeric(str_extract(votes_without_K,"\\d+\\.?\\d*"))
return(numeric_votes*1000)
})
votes_list <- unlist(votes_list, recursive = TRUE)
print(votes_list)
length(title_names)
length(year_list)
length(duration_list)
length(rating_list)
length(votes_list)
min_length <- min(length(title_names), length(year_list), length(duration_list), length(rating_list), length(votes_list))
# Ardından data frame'i oluşturalım
movie_data <- data.frame(
Title = title_names[1:min_length],
Year = year_list[1:min_length],
Duration = duration_list[1:min_length],
Rating = rating_list[1:min_length],
Votes = votes_list[1:min_length]
)
# Oluşturulan data frame'i yazdıralım
print(movie_data)
head(title_names)
head(movie_data)
library(ggplot2)
# Verilerinizi bir veri çerçevesine dönüştürün (örneğin, data.frame)
df <- data.frame(Title = title_names)
# Başlıkların frekansını hesaplayın
title_freq <- table(df$Title)
# Verileri içeren bir veri çerçevesi oluşturun
df_freq <- data.frame(Title = names(title_freq), Frequency = as.numeric(title_freq))
# Frekans sütununu büyükten küçüğe sıralayın
df_freq <- df_freq[order(-df_freq$Frequency), ]
# Bar plot oluşturun
ggplot(df_freq, aes(x = Title, y = Frequency)) +
geom_bar(stat = "identity", fill = "blue") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Başlık Frekansları") +
xlab("Başlık") +
ylab("Frekans")
sorted_ratings <- numeric_ratings[order(rating_list, decreasing = TRUE)]
sorted_ratings <- rating_list[order(rating_list, decreasing = TRUE)]
# Sıralanmış puanları yazdırma
print(sorted_ratings)
top5 <- sorted_ratings[1:5]
print(top5$title)
top5 <- sorted_ratings[1:5]
print(top5)
best <- sorted_ratings[1:5]
best_films <- title_names[best]
print(best_films)
top_5_indices <- order(rating_list, decreasing = TRUE)[1:5]
# Top 5 filmlerin puanlarını ve adlarını yazdırma
top_5_ratings <- rating_list[top_5_indices]
top_5_titles <- title_names[top_5_indices]
for (i in 1:5) {
cat("Film:", top_5_titles[i], "\tRating:", top_5_ratings[i], "\n")
}
worst_5_indices <- order(rating_list, increasing = TRUE)[1:5]
worst_5_indices <- order(rating_list, decreasing = FALSE)[1:5]
# Top 5 filmlerin puanlarını ve adlarını yazdırma
worst_5_ratings <- rating_list[worst_5_indices]
worst_5_titles <- title_names[worst_5_indices]
for (i in 1:5) {
cat("Film:", worst_5_titles[i], "\tRating:", worst_5_ratings[i], "\n")
}
library(ggplot2)
avg_ratings <- data %>%
group_by(Year) %>%
summarise(AvgRating = mean(Rating))
library(ggplot2)
library(tidyverse) # for everything :)
library(rvest) # for HTML scraping
library(stringr)
# Calculate yearly rating averages
avg_ratings <- data %>%
group_by(Year) %>%
summarise(AvgRating = mean(Rating))
data <- data.frame(Year = rep(year_list, sapply(rating_list, length)),
Rating = unlist(rating_list))
average_ratings <- aggregate(Rating ~ Year, data = movie_data, mean)
# Çizgi grafiği oluştur
ggplot(average_ratings, aes(x = Year, y = Rating)) +
geom_line() +
geom_point() +
labs(title = "Yıllara Göre Ortalama Rating",
x = "Yıl",
y = "Ortalama Rating") +
theme_minimal()
library(dplyr)
library(ggplot2)
# Movie Data üzerinden yıllara göre ortalama rating hesapla
average_ratings <- movie_data %>%
group_by(Year) %>%
summarize(AverageRating = mean(Rating), NumberOfMovies = n())
# Çizgi grafiği oluştur
ggplot(average_ratings, aes(x = Year, y = AverageRating, size = NumberOfMovies)) +
geom_line() +
geom_point() +
labs(title = "Yıllara Göre Ortalama Rating",
x = "Yıl",
y = "Ortalama Rating",
size = "Film Sayısı") +
theme_minimal()
library(dplyr)
library(ggplot2)
# Movie Data üzerinden yıllara ve filmlere göre rating'i al
ratings_by_year <- movie_data %>%
group_by(Year) %>%
summarize(AverageRating = mean(Rating))
# Çizgi grafiği oluştur
ggplot(ratings_by_year, aes(x = Year, y = AverageRating)) +
geom_line() +
geom_point() +
labs(title = "Her Yılın Rating Ortalaması",
x = "Yıl",
y = "Ortalama Rating") +
theme_minimal()
library(dplyr)
library(ggplot2)
# Movie Data üzerinden yıllara ve filmlere göre rating'i al
ratings_by_year <- movie_data %>%
group_by(Year) %>%
summarize(AverageRating = mean(Rating))
# Çizgi grafiği oluştur
ggplot(ratings_by_year, aes(x = Year, y = AverageRating)) +
geom_line() +
geom_point() +
labs(title = "Her Yılın Rating Ortalaması",
x = "Yıl",
y = "Ortalama Rating") +
theme_minimal()
aranan_film <- "G.O.R.A"
# Arama işlemi
aranan_film_sirasi <- movie_data %>%
filter(Title == aranan_film) %>%
arrange(desc(Rating)) %>%
mutate(sira = row_number()) %>%
pull(sira)
# Sonucu yazdır
cat("Aranan film", aranan_film, "sıralamada", aranan_film_sirasi, ". sıradadır.")
